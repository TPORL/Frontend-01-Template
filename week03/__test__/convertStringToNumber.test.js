const convertStringToNumber = require('../convertStringToNumber')

describe('convertStringToNumber', () => {
  it('convert types other than string', () => {
    expect(convertStringToNumber(undefined)).toBe(NaN)
    expect(convertStringToNumber(null)).toBe(NaN)
    expect(convertStringToNumber(true)).toBe(NaN)
    expect(convertStringToNumber(false)).toBe(NaN)
    expect(convertStringToNumber(123)).toBe(123)
    expect(convertStringToNumber(Symbol())).toBe(NaN)
    expect(convertStringToNumber({})).toBe(NaN)
    expect(convertStringToNumber({ [Symbol.toPrimitive]: () => 123 })).toBe(123)
  })

  it('convert string', () => {
    expect(convertStringToNumber('Infinity')).toBe(Infinity)
    expect(convertStringToNumber('123.')).toBe(123)
    expect(convertStringToNumber('123.456')).toBe(123.456)
    expect(convertStringToNumber('123.456e10')).toBe(123.456e10)
    expect(convertStringToNumber('.123')).toBe(0.123)
    expect(convertStringToNumber('.123e10')).toBe(0.123e10)
    expect(convertStringToNumber('123')).toBe(123)
    expect(convertStringToNumber('123e10')).toBe(123e10)
    expect(convertStringToNumber('0b101')).toBe(0b101)
    expect(convertStringToNumber('0B101')).toBe(0b101)
    expect(convertStringToNumber('101', 2)).toBe(0b101)
    expect(convertStringToNumber('0o101')).toBe(0o101)
    expect(convertStringToNumber('0O101')).toBe(0o101)
    expect(convertStringToNumber('101', 8)).toBe(0o101)
    expect(convertStringToNumber('0x101')).toBe(0x101)
    expect(convertStringToNumber('0X101')).toBe(0x101)
    expect(convertStringToNumber('101', 16)).toBe(0x101)
    expect(convertStringToNumber('101', 36)).toBe(1297)

    expect(convertStringToNumber('test')).toBe(NaN)
    expect(convertStringToNumber('123.456.789')).toBe(123.456)
    expect(convertStringToNumber('123.456.789e10e11')).toBe(123.456e10)
    expect(convertStringToNumber('123.456e010')).toBe(123.456e10)
    expect(convertStringToNumber('123.456eabc')).toBe(123.456)
  })

  it('convert string with plus sign', () => {
    expect(convertStringToNumber('+Infinity')).toBe(Infinity)
    expect(convertStringToNumber('+123.')).toBe(123)
    expect(convertStringToNumber('+123.456')).toBe(123.456)
    expect(convertStringToNumber('+123.456e10')).toBe(123.456e10)
    expect(convertStringToNumber('+.123')).toBe(0.123)
    expect(convertStringToNumber('+.123e10')).toBe(0.123e10)
    expect(convertStringToNumber('+123')).toBe(123)
    expect(convertStringToNumber('+123e10')).toBe(123e10)
    expect(convertStringToNumber('+0b101')).toBe(0)
    expect(convertStringToNumber('+0B101')).toBe(0)
    expect(convertStringToNumber('+101', 2)).toBe(5)
    expect(convertStringToNumber('+0o101')).toBe(0)
    expect(convertStringToNumber('+0O101')).toBe(0)
    expect(convertStringToNumber('+101', 8)).toBe(65)
    expect(convertStringToNumber('+0x101')).toBe(0)
    expect(convertStringToNumber('+0X101')).toBe(0)
    expect(convertStringToNumber('+101', 16)).toBe(257)
    expect(convertStringToNumber('+101', 36)).toBe(1297)
  })

  it('convert string with minus sign', () => {
    expect(convertStringToNumber('-Infinity')).toBe(-Infinity)
    expect(convertStringToNumber('-123.')).toBe(-123)
    expect(convertStringToNumber('-123.456')).toBe(-123.456)
    expect(convertStringToNumber('-123.456e10')).toBe(-123.456e10)
    expect(convertStringToNumber('-.123')).toBe(-0.123)
    expect(convertStringToNumber('-.123e10')).toBe(-0.123e10)
    expect(convertStringToNumber('-123')).toBe(-123)
    expect(convertStringToNumber('-123e10')).toBe(-123e10)
    expect(convertStringToNumber('-0b101')).toBe(-0)
    expect(convertStringToNumber('-0B101')).toBe(-0)
    expect(convertStringToNumber('-101', 2)).toBe(-5)
    expect(convertStringToNumber('-0o101')).toBe(-0)
    expect(convertStringToNumber('-0O101')).toBe(-0)
    expect(convertStringToNumber('-101', 8)).toBe(-65)
    expect(convertStringToNumber('-0x101')).toBe(-0)
    expect(convertStringToNumber('-0X101')).toBe(-0)
    expect(convertStringToNumber('-101', 16)).toBe(-257)
    expect(convertStringToNumber('-101', 36)).toBe(-1297)
  })
})
